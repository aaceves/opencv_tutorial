#include "ros/ros.h"
#include <opencv2/opencv.hpp>

const std::string window_capture_name = "Original Video";
const std::string window_detection_name = "Object Detection";

std::string x, y, z;
int low_x, low_y, low_z;
int high_x, high_y, high_z;
int color_space, flag = 0;
float conv_factor_x= 1, conv_factor_yz= 1;

void HSV()
{
	flag = 1;
	color_space= cv::COLOR_BGR2HSV;
    x="H";
    y="S";
    z="V";
	low_x = 0; 
	low_y = 0;
	low_z = 0;
	high_x = 360;
	high_y = 1000;
	high_z = 1000;
	conv_factor_x = 0.5; 
	conv_factor_yz = 0.255;
}

void YCrCb()
{
	color_space= cv::COLOR_BGR2HSV;
    x="Y";
    y="Cr";
    z="Cb";
	low_x = 0; 
	low_y = 0;
	low_z = 0;
	high_x = 255;
	high_y = 255;
	high_z = 255;
}

void Lab()
{
	color_space= cv::COLOR_BGR2Lab;
    x="L";
    y="a";
    z="b";
	low_x = 0; 
	low_y = 0;
	low_z = 0;
	high_x = 1000;
	high_y = 255;
	high_z = 255;
	conv_factor_x = 0.255; 
	
}

void HSI()
{
	flag = 1;
	color_space= cv::COLOR_BGR2HLS;
    x="H";
    y="S";
    z="I";
	low_x = 0; 
	low_y = 0;
	low_z = 0;
	high_x = 360;
	high_y = 1000;
	high_z = 1000;
	conv_factor_x = 0.5; 
	conv_factor_yz = 0.255;
}


static void on_low_x_thresh_trackbar(int, void *)
{
    if (flag == 0) low_x = std::min(high_x-1, low_x);
    cv::setTrackbarPos("Low "+ x, window_detection_name, low_x);
}
static void on_high_x_thresh_trackbar(int, void *)
{
    if (flag == 0) high_x = std::max(high_x, low_x+1);
    cv::setTrackbarPos("High "+ x, window_detection_name, high_x);
}
static void on_low_y_thresh_trackbar(int, void *)
{
    low_y = std::min(high_y-1, low_y);
    cv::setTrackbarPos("Low "+ y, window_detection_name, low_y);
}
static void on_high_y_thresh_trackbar(int, void *)
{
    high_y = std::max(high_y, low_y+1);
    cv::setTrackbarPos("High "+ y, window_detection_name, high_y);
}
static void on_low_z_thresh_trackbar(int, void *)
{
    low_z = std::min(high_z-1, low_z);
    cv::setTrackbarPos("Low "+ z, window_detection_name, low_z);
}
static void on_high_z_thresh_trackbar(int, void *)
{
    high_z = std::max(high_z, low_z+1);
    cv::setTrackbarPos("High "+ z, window_detection_name, high_z);
}

int main(int argc, char **argv){
    
    int option;
	std::cout << "Elija una opciÃ³n:" << std::endl;
	std::cout << "1. HSV \t 2. YCrCb \t 3. Lab \t 4. HSI" << std::endl;
	std::cin >> option;
	switch (option) {
		case 1:
			HSV();
			break;
		case 2:
			YCrCb();
			break;
		case 3:
			Lab();
			break;
		case 4:
			HSI();
			break;
	} 
    
    ros::init(argc, argv, "showspaceColors");
    ros::NodeHandle n;
    ros::Rate loop_rate(0.5);
    // -------------------------- INICIA CODIGO DE OPENCV --------------------------
    // Based from: hhttps://docs.opencv.org/master/da/d97/tutorial_threshold_inRange.html
    cv::VideoCapture cap(0);
    cv::namedWindow(window_capture_name);
    cv::moveWindow(window_capture_name, 100,100);
    cv::namedWindow(window_detection_name); 
    cv::moveWindow(window_detection_name, 800,100);
	 
    // Trackbars to set thresholds for xyz values
    cv::createTrackbar("Low "+ x,  window_detection_name, &low_x,  high_x, on_low_x_thresh_trackbar);
    cv::createTrackbar("High "+ x, window_detection_name, &high_x, high_x, on_high_x_thresh_trackbar);
    cv::createTrackbar("Low "+ y,  window_detection_name, &low_y,  high_y, on_low_y_thresh_trackbar);
    cv::createTrackbar("High "+ y, window_detection_name, &high_y, high_y, on_high_y_thresh_trackbar);
    cv::createTrackbar("Low "+ z,  window_detection_name, &low_z,  high_z, on_low_z_thresh_trackbar);
    cv::createTrackbar("High "+ z, window_detection_name, &high_z, high_z, on_high_z_thresh_trackbar);
    
    cv::Mat frame, frame_Out, frame_threshold,frame_threshold1,frame_threshold2;

    while (true) {
        cap >> frame;
        if(frame.empty())  exit(1);
        // Convert from BGR to any colorspace  
        cv::cvtColor(frame, frame_Out, color_space); // cv::COLOR_BGR2HSV = 40 - cv::COLOR_BGR2HSV = 36 - cv::COLOR_BGR2Lab = 44 - cv::COLOR_BGR2HLS = 52;
        // Detect the object based on HSV Range Values
        if(flag == 1 && low_x > high_x){
			    cv::inRange(frame_Out, cv::Scalar(low_x*conv_factor_x, low_y*conv_factor_yz, low_z*conv_factor_yz), cv::Scalar(180, high_y*conv_factor_yz, high_z*conv_factor_yz), frame_threshold1);	
			    cv::inRange(frame_Out, cv::Scalar(0, low_y*conv_factor_yz, low_z*conv_factor_yz), cv::Scalar(high_x*conv_factor_x, high_y*conv_factor_yz, high_z*conv_factor_yz), frame_threshold2);
			    cv::add(frame_threshold1,frame_threshold2,frame_threshold);
		    }
		    else{
			    cv::inRange(frame_Out, cv::Scalar(low_x*conv_factor_x, low_y*conv_factor_yz, low_z*conv_factor_yz), cv::Scalar(high_x*conv_factor_x, high_y*conv_factor_yz, high_z*conv_factor_yz), frame_threshold);
		    }
        // Show the frames
        cv::imshow(window_capture_name, frame);
        cv::imshow(window_detection_name, frame_threshold);
        char key = (char) cv::waitKey(30);
        if (key == 27) exit(2);
    }    
    // -------------------------- TERMINA CODIGO DE OPENCV --------------------------
    ros::spinOnce();
    return 0;
}
